from fastapi.testclient import TestClient
import pytest

import random
from datetime import datetime 
from main import app

client = TestClient(app)

bearer_token = open('.secrets').readline().rstrip()

val = random.random() * 10
timestamp = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")

# set up variable to capture data for subsequent tests.
def pytest_namespace():
    return {
      'queue_item': dict(),
      'queue': [],
    }

# captures the data generated by creating a queue item
# for use in later test.
@pytest.fixture
def caputre_queue_add():
  response = client.post(
    "/queue/", 
    headers = {'Authorization': 'Bearer '+bearer_token},
    json={
        "timestamp": timestamp,
        "value": val
    }
  )
  json = response.json()

  pytest.queue_item = json

# tests that both create and read work
def test_read_queue_item(caputre_queue_add):
  global queue_item
  response = client.get(
    "/queue/"+str(pytest.queue_item["id"]),
    headers = {'Authorization': 'Bearer '+bearer_token},
  )
  json = response.json()

  assert response.status_code == 200
  assert json["timestamp"] == timestamp
  assert json["value"] == val
  assert json == pytest.queue_item


# test error thrown when value is wrong
def test_queue_add_negative_val():
  val = -random.random() * 10
  timestamp = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")

  response = client.post(
    "/queue/", 
    headers = {'Authorization': 'Bearer '+bearer_token},
    json={
        "timestamp": timestamp,
        "value": val
    }
  )
  assert response.status_code == 422

# test error thrown when timestamp is wrong
def test_queue_add_negative_datetime():
  val = -random.random() * 10
  timestamp = "wrong"

  response = client.post(
    "/queue/", 
    headers = {'Authorization': 'Bearer '+bearer_token},
    json={
        "timestamp": timestamp,
        "value": val
    }
  )
  assert response.status_code == 422

# get current queue
@pytest.fixture
def get_queue():
  response = client.get(
    "/queue/", 
    headers = {'Authorization': 'Bearer '+bearer_token},
  )
  pytest.queue = response.json()

# test processing the queue. Confirm that records created match the items in the queue
def test_process_queue(get_queue):
  response = client.post(
    "/records/", 
    headers = {'Authorization': 'Bearer '+bearer_token},
  )

  json = response.json()

  assert response.status_code == 200

  matches = 0
  record_ids = []
  for item in pytest.queue:
    for record in json:
      if (item["timestamp"] == record["ts"] and item["value"] == record["val"] and record["id"] not in record_ids):
        matches += 1
        record_ids.append(record["id"])
        continue
  assert matches == len(pytest.queue)

# queue is not empty. Test that trying to get an item from it returns 404
def test_read_queue_item_neg():
  response = client.get(
    "/queue/1",
    headers = {'Authorization': 'Bearer '+bearer_token},
  )
  json = response.json()

  assert response.status_code == 404

# test the reading the whole queue return a 200 and an empty array
def test_read_queue_items_neg():
  response = client.get(
    "/queue/",
    headers = {'Authorization': 'Bearer '+bearer_token},
  )
  json = response.json()

  assert response.status_code == 200
  assert json == []

# test processing an empty queue doesn't cause any errors
def test_process_empty_queue():
  response = client.post(
    "/records/", 
    headers = {'Authorization': 'Bearer '+bearer_token},
  )

  json = response.json()

  assert response.status_code == 200
  assert len(json) == 0

# test that authentication fails.
def test_bad_auth():
  response = client.get(
    "/records/", 
    headers = {'Authorization': 'Bearer bad_token'},
  )
  assert response.status_code == 401
